import random

citys = [
    (0,3),(0,0),
    (0,2),(0,1),
    (1,0),(1,3),
    (2,0),(2,3),
    (3,0),(3,3),
    (3,1),(3,2)
]

l = len(citys)
path = [(i+1)%l for i in range(l)]
print("初始路徑:", path)

def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return ((x2-x1)**2 + (y2-y1)**2)**0.5

def pathLength(p):
    dist = 0
    plen = len(p)
    for i in range(plen):
        dist += distance(citys[p[i]], citys[p[(i+1)%plen]])
    return dist

def get_neighbors(path):
    neighbors = []
    for i in range(len(path)):
        for j in range(i + 1, len(path)):
            neighbor = path[:]
            neighbor[i], neighbor[j] = neighbor[j], neighbor[i]
            neighbors.append(neighbor)
    return neighbors

def hill_climbing(path):
    current_path = path
    current_cost = pathLength(current_path)
    neighbors = get_neighbors(current_path)
    
    for neighbor in neighbors:
        neighbor_cost = pathLength(neighbor)
        if neighbor_cost < current_cost:
            current_path = neighbor
            current_cost = neighbor_cost
            
    return current_path, current_cost

print("初始路徑長度:", pathLength(path))

iterations = 100
for i in range(iterations):
    new_path, new_cost = hill_climbing(path)
    if new_cost < pathLength(path):
        path = new_path
        print(f"第{i+1}次迭代 - 最佳路徑長度: {new_cost}")

print("最終路徑:", path)
print("最終路徑長度:", pathLength(path))
