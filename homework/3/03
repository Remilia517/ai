#參考chatgpt

def pivot(T, row, col):
    pivot_element = T[row][col]
    T[row] = [x / pivot_element for x in T[row]]
    
    for i in range(len(T)):
        if i != row:
            ratio = T[i][col]
            T[i] = [T[i][j] - ratio * T[row][j] for j in range(len(T[i]))]

def simplex(c, A, b):
    num_vars = len(c)
    num_constraints = len(b)
    
    T = [A[i] + [0] * num_constraints + [b[i]] for i in range(num_constraints)]
    for i in range(num_constraints):
        T[i][num_vars + i] = 1

    T.append([-x for x in c] + [0] * (num_constraints + 1))

    basis = list(range(num_vars, num_vars + num_constraints))

    while True:
        if all(x >= 0 for x in T[-1][:-1]):
            break
        col = T[-1][:-1].index(min(T[-1][:-1]))

        ratios = [(T[i][-1] / T[i][col] if T[i][col] > 0 else float('inf')) for i in range(num_constraints)]
        row = ratios.index(min(ratios))

        if ratios[row] == float('inf'):
            raise Exception('Unbounded solution')

        pivot(T, row, col)
        basis[row] = col

    solution = [0] * num_vars
    for i in range(num_constraints):
        if basis[i] < num_vars:
            solution[basis[i]] = T[i][-1]

    max_value = T[-1][-1]
    return solution, max_value

c = [3, 2, 5]

A = [
    [1, 1, 0],  # x + y <= 10
    [2, 0, 1],  # 2x + z <= 9
    [0, 1, 2]   # y + 2z <= 11
]
b = [10, 9, 11]

solution, max_value = simplex(c, A, b)

print("最佳解:")
print(f"x = {solution[0]:.2f}")
print(f"y = {solution[1]:.2f}")
print(f"z = {solution[2]:.2f}")
print(f"最大值: {max_value:.2f}")
