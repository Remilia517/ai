#參考老師程式碼和chatgpt

import numpy as np
from numpy.linalg import norm

class Value:
    def __init__(self, data, _children=(), _op='', label=''):
        self.data = data
        self.grad = 0.0
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op
        self.label = label

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')
        
        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward
        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')
        
        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward
        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data ** other, (self,), f'**{other}')
        
        def _backward():
            self.grad += (other * self.data ** (other - 1)) * out.grad
        out._backward = _backward
        return out

    def __sub__(self, other):
        return self + (-other)
    
    def __neg__(self):
        return self * -1
    
    def backward(self):
        topo = []
        visited = set()
        
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        
        build_topo(self)
        self.grad = 1.0
        for v in reversed(topo):
            v._backward()
    
    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"

def gradientDescendent(f, p0, h=0.01, max_loops=100000):
    p = p0.copy()
    for _ in range(max_loops):
        fp = f(p)
        fp.backward()
        gp = [param.grad for param in p]
        glen = norm(gp)
        if glen < 0.00001:
            break
        gh = np.multiply(gp, -h)
        for i in range(len(p)):
            p[i].data += gh[i]
            p[i].grad = 0.0 
    return p

def f(p):
    [x, y, z] = p
    return (x - 1)**2 + (y - 2)**2 + (z - 3)**2

p = [Value(0), Value(0), Value(0)]
result = gradientDescendent(f, p)
print(result)
